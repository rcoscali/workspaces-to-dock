#!/bin/bash
# usage: build_release [OPTION]
# creates zip in attic/releases/master/<version_number>
# <version_number> if not provided, found in workspaces-to-dock@remi.cohenscali.net/metadata.json
#
# options:
#     -d creates zip in root
#

# Activate pattern matching
shopt -s extglob

APPLICATION="${0##*/}"
USAGE="Usage: $APPLICATION [-d] [-f] [version_number]

Builds the installation zip for release and copies it into the releases folder.
If version_number not provided, this script uses the one provided in metadata.json.
Options:
    -d      Zip file will be copied into the development branch instead of the releases folder.
    -f	    Force overwrite of zip
"

# Process options
while getopts "df" flag; do
    case "$flag" in
        d) DEV='y';;
	f) OVERWRITE='y';;
        *) echo "$USAGE"; exit 1;;
    esac
done
shift $((OPTIND-1))

# Set directory variables
#root_dir=~/.local/share/gnome-shell/extensions/workspaces-to-dock
root_dir=${PWD}
files_dir=$root_dir/workspaces-to-dock@remi.cohenscali.net
temp_dir=$root_dir/attic/releases/build

# Create temp directory
rm -Rf "$temp_dir"
mkdir -p "$temp_dir"

# Copy extension files stripping out debug
cd "$files_dir"
#sed "s/ 0/ $1/g" metadata.json > "$temp_dir/metadata.json"
cat metadata.json > "$temp_dir/metadata.json"

cat convenience.js | grep -v '_DEBUG_' > "$temp_dir/convenience.js"
cat dockedWorkspaces.js | grep -v '_DEBUG_' > "$temp_dir/dockedWorkspaces.js"
cat extension.js | grep -v '_DEBUG_' > "$temp_dir/extension.js"
cat intellihide.js | grep -v '_DEBUG_' > "$temp_dir/intellihide.js"
cat myPressureBarrier.js | grep -v '_DEBUG_' > "$temp_dir/myPressureBarrier.js"
cat myWorkspaceSwitcher.js | grep -v '_DEBUG_' > "$temp_dir/myWorkspaceSwitcher.js"
cat myWorkspaceThumbnail.js | grep -v '_DEBUG_' > "$temp_dir/myWorkspaceThumbnail.js"
cat placeDisplay.js | grep -v '_DEBUG_' > "$temp_dir/placeDisplay.js"
cat prefs.js | grep -v '_DEBUG_' > "$temp_dir/prefs.js"
cat shortcutsPanel.js | grep -v '_DEBUG_' > "$temp_dir/shortcutsPanel.js"
cat thumbnailCaption.js | grep -v '_DEBUG_' > "$temp_dir/thumbnailCaption.js"

# Copy extension subfolders
cp -R schemas/ "$temp_dir/"
cp -R themes/ "$temp_dir/"
cp -R locale/ "$temp_dir/"

# Create release zip
cd "$temp_dir/"
zip -rq workspaces-to-dock@remi.cohenscali.net.zip *

## Verify if argument for version_number exists
version_number_arg_exists=0
if test $# -ge 1;
then
    version_number_arg_exists=1
fi

## Test to verify argument is integer
version_number=$(grep \"version\": metadata.json | awk '{print $2}')
if test $version_number_arg_exists -eq 1; 
then
    if [[ -n "$1" && $1 != [0-9][0-9]* ]];
    then
	echo -e "Error: Invalid version number '$1' !\n"
	echo "$USAGE"
	# Cleanup - remove temp directory
	cd - >/dev/null
	rm -Rf "$temp_dir"
	exit 1
    fi
fi

# Check release file do not exists
if test -z "$OVERWRITE";
then
   if test \( -z "$DEV" -a -f $root_dir/attic/releases/master/$version_number/workspaces-to-dock@remi.cohenscali.net.zip \) -o \( -n "$DEV" -a -f $root_dir/workspaces-to-dock@remi.cohenscali.net.zip \);
   then
       echo -e "Error: Release file already exists... use '-f' to overwrite !\n"
       echo "$USAGE"
       # Cleanup - remove temp directory
       cd - >/dev/null
       rm -Rf "$temp_dir"
       exit 1
   fi
fi


# Set release_dir based on development option and metadata version number
if test -z "$DEV";
then
    release_dir=$root_dir/attic/releases/master/$version_number
else
    release_dir=$root_dir
fi

# Delete and recreate release directory
if test -z "$DEV";
then
    rm -Rf "$release_dir"
    mkdir -p "$release_dir"
fi

# Copy zip file to release directory
cp workspaces-to-dock@remi.cohenscali.net.zip "$release_dir/"

# Cleanup - remove temp directory
cd - >/dev/null
rm -Rf "$temp_dir"
echo "Release $version_number build completed."
